import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import plotly.graph_objects as go
import plotly.express as px

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ML –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è vs –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏
st.markdown("""
    <style>
    .main {
        padding-top: 0rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        text-align: center;
    }
    .metric-card-forest {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }
    h1 {
        color: #667eea;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("# üìä –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è vs –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å")
st.markdown("### –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
show_explanation = st.sidebar.checkbox("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è", value=True, key="show_explanation")

# –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_source = st.sidebar.radio(
    "üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
    ("–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã", "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª"),
    key="data_source"
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
df = None
X = None
y = None

if data_source == "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã":
    # ============== –í–°–¢–†–û–ï–ù–ù–´–ï –î–ê–¢–ê–°–ï–¢–´ ==============
    dataset_choice = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç–∞—Å–µ—Ç:",
        ("–ü—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–°–ª–æ–∂–Ω—ã–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–î–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏", "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"),
        key="dataset_choice"
    )

    if dataset_choice == "–ü—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
        np.random.seed(42)
        X = np.linspace(0, 10, 80).reshape(-1, 1)
        noise = np.random.normal(0, 1, 80)
        y = 2 * X.flatten() + 5 + noise
        dataset_name = "–ü—Ä–æ—Å—Ç—ã–µ –ª–∏–Ω–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        dataset_desc = "–õ–∏–Ω–µ–π–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –∑–∞—Ä–ø–ª–∞—Ç–æ–π"
        expected_winner = "linear"
        explanation = {
            "why": "–î–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç —á–µ—Ç–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—É—é –ª–∏–Ω–µ–π–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.",
            "linear": "‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é.",
            "forest": "‚ùå –ü–µ—Ä–µ—É—Å–ª–æ–∂–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ª–∏–Ω–µ–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            "insight": "üí° –ö–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏–Ω–µ–π–Ω—ã, —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç."
        }

    elif dataset_choice == "–°–ª–æ–∂–Ω—ã–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
        np.random.seed(42)
        X = np.linspace(0, 10, 100).reshape(-1, 1)
        noise = np.random.normal(0, 1.5, 100)
        y = ((X.flatten() - 5) / 2) ** 2 + 2 + noise
        dataset_name = "–°–ª–æ–∂–Ω—ã–µ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        dataset_desc = "U-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏)"
        expected_winner = "forest"
        explanation = {
            "why": "–î–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç —è–≤–Ω–æ –Ω–µ–ª–∏–Ω–µ–π–Ω—É—é, U-–æ–±—Ä–∞–∑–Ω—É—é —Ñ–æ—Ä–º—É.",
            "linear": "‚ùå –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ U-–æ–±—Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
            "forest": "‚úÖ –û—Ç–ª–∏—á–Ω–æ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ—Ç –∫—Ä–∏–≤—É—é —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤.",
            "insight": "üí° –ú–Ω–æ–≥–∏–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã ‚Äî –ª–µ—Å —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª—É—á—à–µ."
        }

    elif dataset_choice == "–î–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏":
        np.random.seed(42)
        X = np.linspace(0, 10, 100).reshape(-1, 1)
        noise = np.random.normal(0, 1, 100)
        y = 1.5 * X.flatten() + 3 + noise
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–æ—Å—ã
        outlier_indices = np.random.choice(100, 15, replace=False)
        y[outlier_indices] += np.random.choice([-12, 15], 15)
        dataset_name = "–î–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏"
        dataset_desc = "–ù–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ä–µ–¥–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö"
        expected_winner = "forest"
        explanation = {
            "why": "–î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–≤—ã–±—Ä–æ—Å—ã).",
            "linear": "‚ùå –î–∞–∂–µ –æ–¥–∏–Ω –≤—ã–±—Ä–æ—Å –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ —Å–¥–≤–∏–Ω—É—Ç—å –ª–∏–Ω–∏—é.",
            "forest": "‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–æ–∂–µ—Å—Ç–≤—É –¥–µ—Ä–µ–≤—å–µ–≤, –≤—ã–±—Ä–æ—Å—ã –∏–º–µ—é—Ç –º–µ–Ω—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ.",
            "insight": "üí° –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å –æ–±–ª–∞–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∫ –≥—Ä—è–∑–Ω—ã–º –¥–∞–Ω–Ω—ã–º."
        }

    else:  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        np.random.seed(42)
        X = np.linspace(0, 10, 120).reshape(-1, 1)
        noise = np.random.normal(0, 2, 120)
        y = 2 * X.flatten() + np.sin(X.flatten() * 1.5) * 4 + (X.flatten() / 10) ** 1.5 * 6 + noise
        dataset_name = "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
        dataset_desc = "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"
        expected_winner = "forest"
        explanation = {
            "why": "–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤.",
            "linear": "‚ùå –ú–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π —Ç—Ä–µ–Ω–¥.",
            "forest": "‚úÖ –ö–∞–∂–¥–æ–µ –¥–µ—Ä–µ–≤–æ –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.",
            "insight": "üí° –í —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å —á–∞—Å—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª—É—á—à–∏–º –≤—ã–±–æ—Ä–æ–º."
        }

else:
    # ============== –ó–ê–ì–†–£–ó–ö–ê CSV ==============
    st.sidebar.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∏ CSV —Ñ–∞–π–ª")
    uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏ CSV —Ñ–∞–π–ª", type=['csv'], key="csv_uploader")

    if uploaded_file is not None:
        try:
            df = pd.read_csv(uploaded_file)
            st.sidebar.success("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            st.sidebar.markdown("### –í—ã–±–µ—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏")
            cols = df.columns.tolist()
            
            x_col = st.sidebar.selectbox("–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (X):", cols, key="x_col")
            y_col = st.sidebar.selectbox("–ó–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (Y):", cols, key="y_col")
            
            if x_col and y_col:
                X = df[[x_col]].values
                y = df[y_col].values
                
                dataset_name = "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV"
                dataset_desc = f"X: {x_col}, Y: {y_col}"
                expected_winner = "forest"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                explanation = {
                    "why": "–≠—Ç–æ —Ç–≤–æ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.",
                    "linear": "–ú–æ–∂–µ—Ç –±—ã—Ç—å —Ö–æ—Ä–æ—à–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ª–∏–Ω–µ–π–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.",
                    "forest": "–ú–æ–∂–µ—Ç –ª—É—á—à–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏.",
                    "insight": "üí° –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å."
                }
                
                st.sidebar.markdown("---")
                st.sidebar.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
                
        except Exception as e:
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {str(e)}")

# ============== –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ==============

if X is not None and y is not None:
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
    if show_explanation:
        st.markdown("---")
        st.markdown("### üìö –û —ç—Ç–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.info(f"**üìå –û–ø–∏—Å–∞–Ω–∏–µ:**\n{dataset_desc}")
        
        with col2:
            st.success(f"**‚úÖ –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è:**\n\n{explanation['linear']}")
        
        with col3:
            st.warning(f"**üå≥ –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å:**\n\n{explanation['forest']}")
        
        st.markdown(f"**{explanation['insight']}**")
    
    st.markdown("---")
    
    # ============== –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô ==============
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    linear_model = LinearRegression()
    linear_model.fit(X, y)
    y_pred_linear = linear_model.predict(X)
    
    # –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
    forest_model = RandomForestRegressor(n_estimators=100, random_state=42, max_depth=10)
    forest_model.fit(X, y)
    y_pred_forest = forest_model.predict(X)
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    def calculate_metrics(y_true, y_pred):
        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)
        return {
            'MSE': mse,
            'RMSE': rmse,
            'MAE': mae,
            'R2': r2
        }
    
    linear_metrics = calculate_metrics(y, y_pred_linear)
    forest_metrics = calculate_metrics(y, y_pred_forest)
    
    # ============== –ì–†–ê–§–ò–ö ==============
    st.markdown("### üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
    
    fig = go.Figure()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ X –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ª–∏–Ω–∏–π
    sorted_indices = np.argsort(X.flatten())
    X_sorted = X[sorted_indices]
    y_pred_linear_sorted = y_pred_linear[sorted_indices]
    y_pred_forest_sorted = y_pred_forest[sorted_indices]
    
    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    fig.add_trace(go.Scatter(
        x=X.flatten(),
        y=y,
        mode='markers',
        name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
        marker=dict(size=8, color='#10b981', opacity=0.7),
        hovertemplate='<b>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ</b><br>X: %{x:.2f}<br>Y: %{y:.2f}<extra></extra>'
    ))
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
    fig.add_trace(go.Scatter(
        x=X_sorted.flatten(),
        y=y_pred_linear_sorted,
        mode='lines',
        name='–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è',
        line=dict(color='#3b82f6', width=3),
        hovertemplate='<b>–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è</b><br>X: %{x:.2f}<br>Y: %{y:.2f}<extra></extra>'
    ))
    
    # –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å
    fig.add_trace(go.Scatter(
        x=X_sorted.flatten(),
        y=y_pred_forest_sorted,
        mode='lines',
        name='–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å',
        line=dict(color='#f59e0b', width=3, dash='dash'),
        hovertemplate='<b>–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å</b><br>X: %{x:.2f}<br>Y: %{y:.2f}<extra></extra>'
    ))
    
    fig.update_layout(
        title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π',
        xaxis_title='–ü—Ä–∏–∑–Ω–∞–∫ (X)',
        yaxis_title='–†–µ–∑—É–ª—å—Ç–∞—Ç (Y)',
        hovermode='closest',
        template='plotly_dark',
        height=500
    )
    
    st.plotly_chart(fig, use_container_width=True, key="prediction_chart")
    
    st.info("üí° **–ó–µ–ª—ë–Ω—ã–µ —Ç–æ—á–∫–∏** ‚Äî —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ. **–°–∏–Ω—è—è –ª–∏–Ω–∏—è** ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –õ–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. **–û—Ä–∞–Ω–∂–µ–≤–∞—è –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è** ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –°–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞.")
    
    # ============== –ú–ï–¢–†–ò–ö–ò ==============
    st.markdown("---")
    st.markdown("### üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("**üìå –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫:**")
        st.info("""
        **R¬≤ Score** ‚Äî –æ—Ç 0 –¥–æ 1. –ë–ª–∏–∂–µ –∫ 1 = –ª—É—á—à–µ (0.9+ –æ—Ç–ª–∏—á–Ω–æ).
        
        **RMSE** ‚Äî –∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–π –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–π –æ—à–∏–±–∫–∏, –≤ —Ç–µ—Ö –∂–µ –µ–¥–∏–Ω–∏—Ü–∞—Ö —á—Ç–æ –¥–∞–Ω–Ω—ã–µ.
        
        **MAE** ‚Äî —Å—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ.
        """)
    
    with col2:
        st.markdown("**üìä –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è**")
        st.metric("R¬≤ Score", f"{linear_metrics['R2']:.3f}", "")
        st.metric("RMSE", f"{linear_metrics['RMSE']:.3f}", "")
        st.metric("MAE", f"{linear_metrics['MAE']:.3f}", "")
    
    with col3:
        st.markdown("**üå≥ –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å**")
        st.metric("R¬≤ Score", f"{forest_metrics['R2']:.3f}", "")
        st.metric("RMSE", f"{forest_metrics['RMSE']:.3f}", "")
        st.metric("MAE", f"{forest_metrics['MAE']:.3f}", "")
    
    with col4:
        winner = "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è" if linear_metrics['R2'] > forest_metrics['R2'] else "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å"
        st.markdown(f"**üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å:**")
        st.success(f"**{winner}**")
        st.metric("–†–∞–∑–Ω–∏—Ü–∞ R¬≤", f"{abs(linear_metrics['R2'] - forest_metrics['R2']):.3f}", "")
    
    # ============== –°–†–ê–í–ù–ï–ù–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö ==============
    st.markdown("---")
    st.markdown("### ‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    
    characteristics = {
        '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å': {'–õ–∏–Ω–µ–π–Ω–∞—è': 95, '–õ–µ—Å': 30},
        '–†–∞–±–æ—Ç–∞ —Å –Ω–µ–ª–∏–Ω–µ–π–Ω–æ—Å—Ç—å—é': {'–õ–∏–Ω–µ–π–Ω–∞—è': 35, '–õ–µ—Å': 95},
        '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –≤—ã–±—Ä–æ—Å–∞–º': {'–õ–∏–Ω–µ–π–Ω–∞—è': 40, '–õ–µ—Å': 92},
        '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è': {'–õ–∏–Ω–µ–π–Ω–∞—è': 99, '–õ–µ—Å': 70},
        '–ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö': {'–õ–∏–Ω–µ–π–Ω–∞—è': 95, '–õ–µ—Å': 60}
    }
    
    char_df = pd.DataFrame(characteristics).T
    
    fig_comparison = go.Figure()
    
    for col in char_df.columns:
        fig_comparison.add_trace(go.Bar(
            x=char_df.index,
            y=char_df[col],
            name=col,
            marker_color='#3b82f6' if col == '–õ–∏–Ω–µ–π–Ω–∞—è' else '#f59e0b'
        ))
    
    fig_comparison.update_layout(
        title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º–æ–¥–µ–ª–µ–π',
        xaxis_title='–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞',
        yaxis_title='–û—Ü–µ–Ω–∫–∞ (0-100)',
        barmode='group',
        template='plotly_dark',
        height=400
    )
    
    st.plotly_chart(fig_comparison, use_container_width=True, key="comparison_chart")
    
    # ============== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ==============
    st.markdown("---")
    st.markdown("### üí° –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥")
    
    winner_model = "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è" if linear_metrics['R2'] > forest_metrics['R2'] else "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å"
    
    if winner_model == "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
        advice = """
        ‚úÖ **–í—ã–±–∏—Ä–∞–π –õ–∏–Ω–µ–π–Ω—É—é —Ä–µ–≥—Ä–µ—Å—Å–∏—é, –∫–æ–≥–¥–∞:**
        - –î–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏–Ω–µ–π–Ω—ã –∏–ª–∏ –±–ª–∏–∑–∫–∏ –∫ –ª–∏–Ω–µ–π–Ω–æ—Å—Ç–∏
        - –ù—É–∂–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å (–ø–æ–Ω–∏–º–∞—Ç—å, –ø–æ—á–µ–º—É –º–æ–¥–µ–ª—å —Ç–∞–∫ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç)
        - –°–∫–æ—Ä–æ—Å—Ç—å –∏ –ø—Ä–æ—Å—Ç–æ—Ç–∞ –≤–∞–∂–Ω–µ–µ —á–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
        - –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        - –ù—É–∂–Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å (–ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö)
        """
    else:
        advice = """
        ‚úÖ **–í—ã–±–∏—Ä–∞–π –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å, –∫–æ–≥–¥–∞:**
        - –î–∞–Ω–Ω—ã–µ —Å–ª–æ–∂–Ω—ã–µ –∏ –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–µ
        - –í –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –≤—ã–±—Ä–æ—Å—ã –∏ –∞–Ω–æ–º–∞–ª–∏–∏
        - –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞
        - –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –º–µ–Ω–µ–µ –≤–∞–∂–Ω–∞
        - –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        - –ï—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        """
    
    st.success(f"**–î–ª—è —ç—Ç–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {winner_model}**\n\n{advice}")
    
    # ============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ==============
    st.markdown("---")
    st.markdown("### üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    with st.expander("üìö –ß—Ç–æ —Ç–∞–∫–æ–µ –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è?"):
        st.markdown("""
        **–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è** ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø—Ä—è–º—É—é –ª–∏–Ω–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏.
        
        **–û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞:** `y = Œ≤‚ÇÄ + Œ≤‚ÇÅ√óx + Œµ`
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
        - –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è
        - –ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞–µ—Ç—Å—è
        - –õ–µ–≥–∫–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        
        **–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**
        - –ü–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        - –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –≤—ã–±—Ä–æ—Å–∞–º
        - –¢—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –¥–æ–ø—É—â–µ–Ω–∏–π
        """)
    
    with st.expander("üå≥ –ß—Ç–æ —Ç–∞–∫–æ–µ –°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å?"):
        st.markdown("""
        **–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å** ‚Äî —ç—Ç–æ –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π –∏ —É—Å—Ä–µ–¥–Ω—è–µ—Ç –∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
        
        **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
        1. –°–æ–∑–¥–∞—ë—Ç –º–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤ —Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        2. –ö–∞–∂–¥–æ–µ –¥–µ—Ä–µ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        3. –ò—Ç–æ–≥–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –≤—Å–µ—Ö –¥–µ—Ä–µ–≤—å–µ–≤
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
        - –û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–µ–ª–∏–Ω–µ–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        - –£—Å—Ç–æ–π—á–∏–≤ –∫ –≤—ã–±—Ä–æ—Å–∞–º –∏ —à—É–º—É
        - –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        **–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**
        - –°–ª–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å ("—á—ë—Ä–Ω—ã–π —è—â–∏–∫")
        - –ú–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—É—á–∞–µ—Ç—Å—è
        - –ù–µ –º–æ–∂–µ—Ç —ç–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∞–Ω–Ω—ã—Ö
        """)

else:
    st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ CSV —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")

# ============== –í–ò–î–ï–û –í–ù–ò–ó–£ ==============
st.markdown("---")
st.markdown("### üé• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ")

try:
    st.video("video.mp4")
except Exception as e:
    st.info("‚ÑπÔ∏è –í–∏–¥–µ–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å video.mp4 –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.")
